impl Solution {
    pub fn find_max_fish(grid: Vec<Vec<i32>>) -> i32 {
   
        let (m,n)=(grid.len(),grid[0].len());
        let mn=m*n;
        let mut parent:Vec<usize>=(0..mn).collect();
        let mut sz=vec![0;mn];
        fn find(x:usize,parent:&mut Vec<usize>)->usize{
            let px=parent[x];
            if px!=x{
                parent[x]=find(px,parent);
            }
            parent[x]
        }
        let unite=|x:usize,y:usize,parent:&mut Vec<usize>,sz:&mut Vec<i32>|{
            let (px,py)=(find(x,parent),find(y,parent));
            if px!=py{
                parent[px]=py;
                sz[py]+=sz[px];
            }
        };
         for (i,row) in grid.iter().enumerate(){
            for (j,&v) in row.iter().enumerate(){
                if v>0{
                    sz[i*n+j]=v;
                }
            }
        }
        for (i,row) in grid.iter().enumerate(){
            for (j,&v) in row.iter().enumerate(){
                if v==0{
                    continue
                }
                for d in [0,1,0,-1,0].windows(2){
                    let (ni,nj)=(i as i32+d[0],j as i32+d[1]);
                    if ni<0||ni==m as i32||nj<0||nj==n as i32{
                        continue
                    }
                    let (ni,nj)=(ni as usize,nj as usize);
                    if grid[ni][nj]>0{
                        unite(i*n+j,ni*n+nj,&mut parent,&mut sz);
                    }
                }
            }
        }
        sz.into_iter().max().unwrap()
    }
}
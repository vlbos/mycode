impl Solution {
    pub fn min_score(n: i32, roads: Vec<Vec<i32>>) -> i32 {
        let mut map=std::collections::HashMap::new();
        let mut parent:Vec<i32>=(0..=n).collect();
        fn find(x:i32,parent:&mut Vec<i32>)->i32{
            let px=parent[x as usize];
            if px!=x{
                parent[x as usize]=find(px,parent);
            }
            parent[x as usize]
        }
        let unite=|x:i32,y:i32,parent:&mut Vec<i32>|{
                let (px,py)=(find(x,parent),find(y,parent));
                if px!=py{
                    parent[px as usize]=py;
                }
        };
        for road in &roads{
            unite(road[0],road[1],&mut parent);
        }
        for road in &roads{
            let z=find(road[0],&mut parent);
            let v=road[2].min(*map.get(&z).unwrap_or(&i32::MAX));
            map.insert(z,v);
        }
        map[&find(1,&mut parent)]
    }
}
impl Solution {
    pub fn count_distinct(nums: Vec<i32>, k: i32, p: i32) -> i32 {
        use std::collections::HashMap;
        let mut ne=vec![HashMap::new()];
        let n =nums.len();
        for i in 0..n{
            let mut cnt=0;
            let mut node=0;
            for j in i..n{
                if nums[j]%p==0{
                     cnt+=1;
                    if cnt>k {
                        break
                    }
                }
                if !ne[node as usize].contains_key(&nums[j]){
                    let len=ne.len() as i32;
                    ne[node as usize].insert(nums[j],len);
                    ne.push(HashMap::new());
                }
                node=ne[node as usize][&nums[j]];
            }
        }
        ne.len() as i32-1
    }
}
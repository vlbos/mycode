impl Solution {
    pub fn beautiful_subsets(nums: Vec<i32>, k: i32) -> i32 {
       let mut cnt=vec![0;(*nums.iter().max().unwrap()+k*2+1) as usize];
       fn dfs(i:usize,nums: &Vec<i32>, k: usize,cnt:&mut Vec<i32>,ans:&mut i32){
           if i==nums.len(){
               *ans+=1;
               return
           }
           dfs(i+1,nums,k,cnt,ans);
           let x=nums[i] as usize+k;
           if cnt[x-k]==0 && cnt[x+k]==0{
                cnt[x]+=1;
                dfs(i+1,nums,k,cnt,ans);
                cnt[x]-=1;
           }

       }
       let mut ans=-1;
       dfs(0,&nums,k as usize,&mut cnt,&mut ans);
       ans
    }
}


impl Solution {
    pub fn beautiful_subsets(nums: Vec<i32>, k: i32) -> i32 {
       let mut cnt=vec![0;(*nums.iter().max().unwrap()+k*2+1) as usize];
       fn dfs(i:usize,nums: &Vec<i32>, k: usize,cnt:&mut Vec<i32>,ans:&mut i32){
             *ans+=1;
           if i==nums.len(){
               return
           }
           for j in i..nums.len(){
            let x=nums[j] as usize+k;
            if cnt[x-k]==0 && cnt[x+k]==0{
                cnt[x]+=1;
                dfs(j+1,nums,k,cnt,ans);
                cnt[x]-=1;
             }
           }
          

       }
       let mut ans=-1;
       dfs(0,&nums,k as usize,&mut cnt,&mut ans);
       ans
    }
}
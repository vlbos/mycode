/*
 * @lc app=leetcode id=928 lang=rust
 *
 * [928] Minimize Malware Spread II
 */

// @lc code=start
impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {
        let n = graph.len() as i32;
        use std::collections::HashSet;
        let clean = (0..n)
            .collect::<HashSet<i32>>()
            .difference(&initial.iter().cloned().collect::<HashSet<i32>>()).cloned().collect();
        fn dfs(u: usize, graph: &Vec<Vec<i32>>, clean: &HashSet<i32>, seen: &mut HashSet<usize>) {
            for (v, &adj) in graph[u].iter().enumerate() {
                if adj > 0 && clean.contains(&(v as i32)) && !seen.contains(&v) {
                    seen.insert(v);
                    dfs(v, graph, clean, seen);
                }
            }
        }
        use std::collections::HashMap;
        let mut infected_by: HashMap<i32, Vec<i32>> =
            initial.iter().cloned().map(|x| (x, Vec::new())).collect();
        for &u in &initial {
            let mut seen = HashSet::new();
            dfs(u as usize, &graph, &clean, &mut seen);
            for &v in &seen {
                infected_by.entry(v as i32).or_insert(Vec::new()).push(u);
            }
        }
        let mut contribution = HashMap::new();
        for  neighbors in infected_by.values() {
            if neighbors.len() == 1 {
                *contribution.entry(neighbors[0]).or_insert(0) += 1;
            }
        }
        let mut best = vec![-1, *initial.iter().min().unwrap()];
        for (&u, &score) in &contribution {
            if score > best[0] || score == best[0] && u < best[1] {
                best = vec![score, u];
            }
        }
        best[1]
    }
}
// @lc code=end

impl Solution {
    pub fn contains_cycle(mut grid: Vec<Vec<char>>) -> bool {
        let (m,n)=(grid.len(),grid[0].len());
        let mut parent:Vec<usize>=(0..m*n).collect();
        fn find(x:usize,parent:&mut Vec<usize>)->usize{
            let px=parent[x];
            if px!=x{
                parent[x]=find(px,parent);
            }
            parent[x]
        }
        let unite=|x:usize,y:usize,parent:&mut Vec<usize>|{
            let (px,py)=(find(x,parent),find(y,parent));
            if px==py{
                return false
            }
            parent[px]=py;
            true
        };
        for i in 0..m{
            for j in 0..n{
                if i>0 && grid[i][j]==grid[i-1][j]{
                    if !unite(i*n+j,(i-1)*n+j,&mut parent){
                        return true
                    }
                }
                  if j>0 && grid[i][j]==grid[i][j-1]{
                    if !unite(i*n+j,i*n+j-1,&mut parent){
                        return true
                    }
                }
            }
        }
        false
    }
}